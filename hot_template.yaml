heat_template_version: '2018-08-31'

parameters:
  image_name:
    type: string
    default: debian
  key_name:
    type: string
    default: key1

resources:
  volume_backend:
    type: OS::Cinder::Volume
    properties:
      name: volume_backend
      size: 8

  volume_frontend:
    type: OS::Cinder::Volume
    properties:
      name: volume_frontend
      size: 8

  network:
    type: OS::Neutron::Net
    properties:
      name: project_network

  subnet:
    type: OS::Neutron::Subnet
    properties:
      network: { get_resource: network }
      cidr: 192.168.100.0/24
      gateway_ip: 192.168.100.1
      allocation_pools:
        - start: 192.168.100.2
          end: 192.168.100.254

  frontend_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network }
      security_groups: [ { get_resource: frontend_security_group } ]

  backend_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network }
      security_groups: [ { get_resource: backend_security_group } ]

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: External-ENSSAT

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: subnet }

  frontend_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - direction: ingress
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - direction: ingress
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - direction: ingress
          protocol: tcp
          port_range_min: 8080
          port_range_max: 8080
        - direction: ingress
          protocol: tcp
          port_range_min: 443
          port_range_max: 443

  backend_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - direction: ingress
          protocol: tcp
          port_range_min: 22
          port_range_max: 22

  frontend_vm:
    type: OS::Nova::Server
    properties:
      image: { get_param: image_name }
      flavor: m1.mini
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: frontend_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            echo "user:password" | chpasswd
            mkdir /mnt/volume
            sudo mkfs.ext4 /dev/vdb
            sudo mount /dev/vdb /mnt/volume
            chmod o+w /mnt/volume
            git clone https://github.com/MattiasKockum/CloudProject /mnt/volume/CloudProject
            systemctl stop docker
            sudo mv /var/lib/docker /mnt/volume/docker
            sudo ln -s /mnt/volume/docker /var/lib/docker
            systemctl start docker
            cd /mnt/volume/CloudProject && docker-compose up -d web myadmin
          params:
            user: "debian"
            password: "password"

  backend_vm:
    type: OS::Nova::Server
    properties:
      image: { get_param: image_name }
      flavor: m1.mini
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: backend_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            echo "user:password" | chpasswd
            mkdir /mnt/volume
            sudo mkfs.ext4 /dev/vdb
            sudo mount /dev/vdb /mnt/volume
            chmod o+w /mnt/volume
            git clone https://github.com/MattiasKockum/CloudProject /mnt/volume/CloudProject
            systemctl stop docker
            sudo mv /var/lib/docker /mnt/volume/docker
            sudo ln -s /mnt/volume/docker /var/lib/docker
            systemctl start docker
            cd /mnt/volume/CloudProject && docker-compose up -d db
          params:
            user: "debian"
            password: "password"

  volume_attachment_frontend:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: frontend_vm }
      volume_id: { get_resource: volume_frontend }
      mountpoint: /dev/vdb

  volume_attachment_backend:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: backend_vm }
      volume_id: { get_resource: volume_backend }
      mountpoint: /dev/vdb

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: External-ENSSAT
      port_id: { get_resource: frontend_port }

outputs:
  floating_ip_address:
    description: Floating IP Address
    value: { get_attr: [floating_ip, floating_ip_address] }
